-- MySQL Script generated by MySQL Workbench
-- Wed May 10 21:22:21 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

/*
Group Name: Team FEC (Group 35)
Group Members: Noland Seigler & Jennifer Um
Project Title: Federal Election Committeeâ€™s Candidate Funding Sources Database
Assignment: Project Step 3 Draft

*/



-- -----------------------------------------------------
-- Schema cs340_seiglern
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cs340_seiglern
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cs340_seiglern` DEFAULT CHARACTER SET utf8 ;
USE `cs340_seiglern` ;

-- -----------------------------------------------------
-- Table `cs340_seiglern`.`office_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`office_types` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`office_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(1) NOT NULL,
  `name` VARCHAR(50) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`contributor_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`contributor_types` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`contributor_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(3) NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`report_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`report_types` ;
-- Diverges from real data. real data has explanation.
CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`report_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(3) NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`party_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`party_types` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`party_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(1) NOT NULL,
  `short_name` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `short_name_UNIQUE` (`short_name` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`incumbent_challenger_statuses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`incumbent_challenger_statuses` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`incumbent_challenger_statuses` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(1) NOT NULL,
  `name` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`amendment_indicators`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`amendment_indicators` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`amendment_indicators` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(1) NOT NULL,
  `name` VARCHAR(50) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`election_years`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`election_years` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`election_years` (
  `year` YEAR(4) NOT NULL,
  PRIMARY KEY (`year`),
  UNIQUE INDEX `year_UNIQUE` (`year` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`transaction_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`transaction_types` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`transaction_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(3) NOT NULL,
  `name` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`candidates`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`candidates` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`candidates` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `middle_name` VARCHAR(255) NULL,
  `email` VARCHAR(320) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`candidate_office_records`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`candidate_office_records` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`candidate_office_records` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fec_cand_id` VARCHAR(9) NOT NULL,
  `name` VARCHAR(200) NOT NULL,
  `ttl_receipts` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `trans_from_auth` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `coh_bop` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `coh_cop` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cand_contrib` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cand_loans` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `other_loans` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cand_loan_repay` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `other_loan_repay` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `debts_owed_by` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `ttl_indiv_contrib` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cand_office_st` VARCHAR(2) NOT NULL,
  `cand_office_district` VARCHAR(2) NOT NULL,
  `pol_pty_contrib` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cvg_end_dt` DATE NOT NULL,
  `indiv_refund` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `cmte_refund` DECIMAL(14,2) NOT NULL DEFAULT 0.00,
  `office_types_id` TINYINT(3) NOT NULL,
  `candidates_id` INT NULL,
  `party_types_id` TINYINT(3) NOT NULL,
  `incumbent_challenger_statuses_id` TINYINT(3) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `fec_cand_id_UNIQUE` (`fec_cand_id` ASC) VISIBLE,
  INDEX `fk_candidate_office_records_office_types_idx` (`office_types_id` ASC) VISIBLE,
  INDEX `fk_candidate_office_records_candidates1_idx` (`candidates_id` ASC) VISIBLE,
  INDEX `fk_candidate_office_records_party_types1_idx` (`party_types_id` ASC) VISIBLE,
  INDEX `fk_candidate_office_records_incumbent_challenger_statuses1_idx` (`incumbent_challenger_statuses_id` ASC) VISIBLE,
  CONSTRAINT `fk_candidate_office_records_office_types`
    FOREIGN KEY (`office_types_id`)
    REFERENCES `cs340_seiglern`.`office_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_candidate_office_records_candidates1`
    FOREIGN KEY (`candidates_id`)
    REFERENCES `cs340_seiglern`.`candidates` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_candidate_office_records_party_types1`
    FOREIGN KEY (`party_types_id`)
    REFERENCES `cs340_seiglern`.`party_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_candidate_office_records_incumbent_challenger_statuses1`
    FOREIGN KEY (`incumbent_challenger_statuses_id`)
    REFERENCES `cs340_seiglern`.`incumbent_challenger_statuses` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`committee_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`committee_types` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`committee_types` (
  `id` TINYINT(3) NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(1) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `explanation` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`committees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`committees` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`committees` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cmte_id` VARCHAR(9) NOT NULL,
  `name` VARCHAR(200) NOT NULL,
  `city` VARCHAR(30) NULL,
  `state` VARCHAR(2) NULL,
  `zip_code` VARCHAR(9) NULL,
  `committee_types_id` TINYINT(3) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `cmte_id_UNIQUE` (`cmte_id` ASC) VISIBLE,
  INDEX `fk_committees_committee_types1_idx` (`committee_types_id` ASC) VISIBLE,
  CONSTRAINT `fk_committees_committee_types1`
    FOREIGN KEY (`committee_types_id`)
    REFERENCES `cs340_seiglern`.`committee_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`contributions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`contributions` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`contributions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `transaction_pgi` VARCHAR(5) NULL,
  `image_num` VARCHAR(18) NULL,
  `transaction_dt` DATE NULL,
  `transaction_amt` DECIMAL(14,2) NULL,
  `trans_id` VARCHAR(32) NULL,
  `file_num` DECIMAL(22) NULL,
  `memo_cd` VARCHAR(100) NULL,
  `memo_text` VARCHAR(100) NULL,
  `sub_id` DECIMAL(19) NULL,
  `committees_id` INT NOT NULL,
  `report_types_id` TINYINT(3) NOT NULL,
  `transaction_types_id` TINYINT(3) NOT NULL,
  `amendment_indicators_id` TINYINT(3) NOT NULL,
  `contributor_types_id` TINYINT(3) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_contributions_committees1_idx` (`committees_id` ASC) VISIBLE,
  INDEX `fk_contributions_report_types1_idx` (`report_types_id` ASC) VISIBLE,
  INDEX `fk_contributions_transaction_types1_idx` (`transaction_types_id` ASC) VISIBLE,
  INDEX `fk_contributions_amendment_indicators1_idx` (`amendment_indicators_id` ASC) VISIBLE,
  INDEX `fk_contributions_contributor_types1_idx` (`contributor_types_id` ASC) VISIBLE,
  CONSTRAINT `fk_contributions_committees1`
    FOREIGN KEY (`committees_id`)
    REFERENCES `cs340_seiglern`.`committees` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_contributions_report_types1`
    FOREIGN KEY (`report_types_id`)
    REFERENCES `cs340_seiglern`.`report_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_contributions_transaction_types1`
    FOREIGN KEY (`transaction_types_id`)
    REFERENCES `cs340_seiglern`.`transaction_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_contributions_amendment_indicators1`
    FOREIGN KEY (`amendment_indicators_id`)
    REFERENCES `cs340_seiglern`.`amendment_indicators` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_contributions_contributor_types1`
    FOREIGN KEY (`contributor_types_id`)
    REFERENCES `cs340_seiglern`.`contributor_types` (`id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`cycles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`cycles` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`cycles` (
  `year` YEAR(4) NOT NULL,
  PRIMARY KEY (`year`),
  UNIQUE INDEX `year_UNIQUE` (`year` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`candidate_office_records_committees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`candidate_office_records_committees` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`candidate_office_records_committees` (
  `candidate_office_records_id` INT NOT NULL,
  `committees_id` INT NOT NULL,
  PRIMARY KEY (`candidate_office_records_id`, `committees_id`),
  INDEX `fk_candidate_office_records_has_committees_committees1_idx` (`committees_id` ASC) VISIBLE,
  CONSTRAINT `fk_candidate_office_records_has_committees_candidate_office_r1`
    FOREIGN KEY (`candidate_office_records_id`)
    REFERENCES `cs340_seiglern`.`candidate_office_records` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_candidate_office_records_has_committees_committees1`
    FOREIGN KEY (`committees_id`)
    REFERENCES `cs340_seiglern`.`committees` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`candidate_office_records_contributions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`candidate_office_records_contributions` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`candidate_office_records_contributions` (
  `candidate_office_records_id` INT NOT NULL,
  `contributions_id` INT NOT NULL,
  PRIMARY KEY (`candidate_office_records_id`, `contributions_id`),
  INDEX `fk_candidate_office_records_has_contributions_contributions_idx` (`contributions_id` ASC) VISIBLE,
  INDEX `fk_candidate_office_records_has_contributions_candidate_off_idx` (`candidate_office_records_id` ASC) VISIBLE,
  CONSTRAINT `fk_candidate_office_records_has_contributions_candidate_offic1`
    FOREIGN KEY (`candidate_office_records_id`)
    REFERENCES `cs340_seiglern`.`candidate_office_records` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_candidate_office_records_has_contributions_contributions1`
    FOREIGN KEY (`contributions_id`)
    REFERENCES `cs340_seiglern`.`contributions` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`election_years_contributions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`election_years_contributions` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`election_years_contributions` (
  `election_years_year` YEAR(4) NOT NULL,
  `contributions_id` INT NOT NULL,
  PRIMARY KEY (`election_years_year`, `contributions_id`),
  INDEX `fk_election_years_has_contributions_contributions1_idx` (`contributions_id` ASC) VISIBLE,
  INDEX `fk_election_years_has_contributions_election_years1_idx` (`election_years_year` ASC) VISIBLE,
  CONSTRAINT `fk_election_years_has_contributions_election_years1`
    FOREIGN KEY (`election_years_year`)
    REFERENCES `cs340_seiglern`.`election_years` (`year`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_election_years_has_contributions_contributions1`
    FOREIGN KEY (`contributions_id`)
    REFERENCES `cs340_seiglern`.`contributions` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`cycles_contributions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`cycles_contributions` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`cycles_contributions` (
  `cycles_year` YEAR(4) NOT NULL,
  `contributions_id` INT NOT NULL,
  PRIMARY KEY (`cycles_year`, `contributions_id`),
  INDEX `fk_cycles_has_contributions_contributions1_idx` (`contributions_id` ASC) VISIBLE,
  INDEX `fk_cycles_has_contributions_cycles1_idx` (`cycles_year` ASC) VISIBLE,
  CONSTRAINT `fk_cycles_has_contributions_cycles1`
    FOREIGN KEY (`cycles_year`)
    REFERENCES `cs340_seiglern`.`cycles` (`year`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_cycles_has_contributions_contributions1`
    FOREIGN KEY (`contributions_id`)
    REFERENCES `cs340_seiglern`.`contributions` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`election_years_candidate_office_records`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`election_years_candidate_office_records` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`election_years_candidate_office_records` (
  `election_years_year` YEAR(4) NOT NULL,
  `candidate_office_records_id` INT NOT NULL,
  PRIMARY KEY (`election_years_year`, `candidate_office_records_id`),
  INDEX `fk_election_years_has_candidate_office_records_candidate_of_idx` (`candidate_office_records_id` ASC) VISIBLE,
  INDEX `fk_election_years_has_candidate_office_records_election_yea_idx` (`election_years_year` ASC) VISIBLE,
  CONSTRAINT `fk_election_years_has_candidate_office_records_election_years1`
    FOREIGN KEY (`election_years_year`)
    REFERENCES `cs340_seiglern`.`election_years` (`year`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_election_years_has_candidate_office_records_candidate_offi1`
    FOREIGN KEY (`candidate_office_records_id`)
    REFERENCES `cs340_seiglern`.`candidate_office_records` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cs340_seiglern`.`cycles_candidate_office_records`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cs340_seiglern`.`cycles_candidate_office_records` ;

CREATE TABLE IF NOT EXISTS `cs340_seiglern`.`cycles_candidate_office_records` (
  `cycles_year` YEAR(4) NOT NULL,
  `candidate_office_records_id` INT NOT NULL,
  PRIMARY KEY (`cycles_year`, `candidate_office_records_id`),
  INDEX `fk_cycles_has_candidate_office_records_candidate_office_rec_idx` (`candidate_office_records_id` ASC) VISIBLE,
  INDEX `fk_cycles_has_candidate_office_records_cycles1_idx` (`cycles_year` ASC) VISIBLE,
  CONSTRAINT `fk_cycles_has_candidate_office_records_cycles1`
    FOREIGN KEY (`cycles_year`)
    REFERENCES `cs340_seiglern`.`cycles` (`year`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_cycles_has_candidate_office_records_candidate_office_recor1`
    FOREIGN KEY (`candidate_office_records_id`)
    REFERENCES `cs340_seiglern`.`candidate_office_records` (`id`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;






-------------------------------------------------------------------------------------------

--- BEGIN INSERTS


INSERT INTO `cs340_seiglern`.`office_types` (code, name)
VALUES
	('P', 'President'),
    ('H', 'House of Representatives'),
    ('S', 'Senate');
    

INSERT INTO `cs340_seiglern`.`contributor_types` (code, name)
VALUES
    ('CAN', 'Candidate'),
    ('CCM', 'Candidate Committee'),
    ('COM', 'Committee'),
    ('IND', 'Individual (a person)'),
    ('ORG', 'Organization (not a committee and not a person)'),
    ('PAC', 'Political Action Committee'),
    ('PTY', 'Party Organization');

INSERT INTO `cs340_seiglern`.`report_types` (code, name)
VALUES
    ('12C', 'Pre-convention'),
    ('12G', 'Pre-general'),
    ('12P', 'Pre-primary'),
    ('12R', 'Pre-Runoff'),
    ('12S', 'Pre-special'),
    ('30D', 'Post-Election'),
    ('30G', 'Post-general'),
    ('30P', 'Post-primary'),
    ('30R', 'Post-runoff'),
    ('30S', 'Post-special'),
    ('60D', 'Post-convention'),
    ('ADJ', 'Comprehensive adjusted amendment'),
    ('CA', 'Comprehensive amendment'),
    ('M10', 'October monthly'),
    ('M11', 'November monthly'),
    ('M12', 'December monthly'),
    ('M2', 'February monthly'),
    ('M3', 'March monthly'),
    ('M4', 'April monthly'),
    ('M5', 'May monthly'),
    ('M6', 'June monthly'),
    ('M7', 'July monthly'),
    ('M8', 'August monthly'),
    ('M9', 'September monthly'),
    ('MY', 'Mid-year'),
    ('Q1', 'April quarterly'),
    ('Q2', 'July quarterly'),
    ('Q3', 'October quarterly'),
    ('TER', 'Termination'),
    ('YE', 'Year end'),
    ('90S', 'Post inaugural supplement'),
    ('90D', 'Post inaugural'),
    ('48H', '48-hour'),
    ('24H', '24-hour');
    
INSERT INTO `cs340_seiglern`.`party_types` (code, short_name)
VALUES
    ('1', 'DEM'),
    ('2', 'REP'),
    ('3', 'IND');
    

INSERT INTO `cs340_seiglern`.`incumbent_challenger_statuses` (code, name)
VALUES
    ('I', 'Incumbent'),
    ('C', 'Challenger'),
    ('O', 'Open Seat');

INSERT INTO `cs340_seiglern`.`amendment_indicators` (code, name)
VALUES
    ('N', 'New report'),
    ('A', 'Amendment to previous report'),
    ('T', 'Termination report');


INSERT INTO `cs340_seiglern`.`election_years` (year)
VALUES
    ('2018'),
    ('2019'),
    ('2020'),
    ('2021'),
    ('2022'),
    ('2023'),
    ('2024'),
    ('2025'),
    ('2026');



INSERT INTO `cs340_seiglern`.`transaction_types` (code, name)
VALUES
    ('10', 'Contribution to Independent Expenditure-Only Committees (Super PACs), Political Committees with non-contribution accounts (Hybrid PACs) and nonfederal party "soft money" accounts (1991-2002) from a person (individual, partnership, limited liability company, corporation, labor organization, or any other organization or group of persons)'),
    ('10J', 'Memo - Recipient committee''s percentage of nonfederal receipt  from a person (individual, partnership, limited liability company, corporation, labor organization, or any other organization or group of persons)'),
    ('11', 'Native American Tribe contribution'),
    ('11J', 'Memo - Recipient committee''s percentage of contribution from Native American Tribe given to joint fundraising committee'),
    ('12', 'Nonfederal other receipt - Levin Account (Line 2)'),
    ('13', 'Inaugural donation accepted'),
    ('15', 'Contribution to political committees (other than Super PACs and Hybrid PACs) from an individual, partnership or limited liability company'),
    ('15C', 'Contribution from candidate'),
    ('15E', 'Earmarked contributions to political committees (other than Super PACs and Hybrid PACs) from an individual, partnership or limited liability company'),
    ('15F', 'Loans forgiven by candidate'),
    ('15I', 'Earmarked contribution from an individual, partnership or limited liability company received by intermediary committee and passed on in the form of contributor''s check (intermediary in)'),
    ('15J', 'Memo - Recipient committee''s percentage of contribution from an individual, partnership or limited liability company given to joint fundraising committee'),
    ('15T', 'Earmarked contribution from an individual, partnership or limited liability company received by intermediary committee and entered into intermediary''s treasury (intermediary treasury in)'),
    ('15Z', 'In-kind contribution received from registered filer'),
    ('16C', 'Loan received from the candidate'),
    ('16F', 'Loan received from bank'),
    ('16G', 'Loan from individual'),
    ('16H', 'Loan from registered filers'),
    ('16J', 'Loan repayment from individual'),
    ('16K', 'Loan repayment from from registered filer'),
    ('16L', 'Loan repayment received from unregistered entity'),
    ('16R', 'Loan received from registered filers'),
    ('16U', 'Loan received from unregistered entity'),
    ('17R', 'Contribution refund received from registered entity'),
    ('17U', 'Refund/Rebate/Return received from unregistered entity'),
    ('17Y', 'Refund/Rebate/Return from individual or corporation'),
    ('17Z', 'Refund/Rebate/Return from candidate or committee'),
    ('18G', 'Transfer in from affiliated committee'),
    ('18H', 'Honorarium received'),
    ('18J', 'Memo - Recipient committee''s percentage of contribution from a registered committee given to joint fundraising committee'),
    ('18K', 'Contribution received from registered filer'),
    ('18L', 'Bundled contribution'),
    ('18U', 'Contribution received from unregistered committee'),
    ('19', 'Electioneering communication donation received'),
    ('19J', 'Memo - Recipient committee''s percentage of Electioneering Communication donation given to joint fundraising committee'),
    ('20', 'Nonfederal disbursement -  nonfederal party "soft money" accounts (1991-2002)'),
    ('20A', 'Nonfederal disbursement - Levin Account (Line 4A) Voter Registration'),
    ('20B', 'Nonfederal Disbursement - Levin Account (Line 4B) Voter Identification'),
    ('20C', 'Loan repayment made to candidate'),
    ('20D', 'Nonfederal disbursement - Levin Account (Line 4D) Generic Campaign'),
    ('20F', 'Loan repayment made to banks'),
    ('20G', 'Loan repayment made to individual'),
    ('20R', 'Loan repayment made to registered filer'),
    ('20V', 'Nonfederal disbursement - Levin Account (Line 4C) Get Out The Vote'),
    ('20Y', 'Nonfederal refund'),
    ('21Y', 'Native American Tribe refund'),
    ('22G', 'Loan to individual'),
    ('22H', 'Loan to candidate or committee'),
    ('22J', 'Loan repayment to individual'),
    ('22K', 'Loan repayment to candidate or committee'),
    ('22L', 'Loan repayment to bank'),
    ('22R', 'Contribution refund to unregistered entity'),
    ('22U', 'Loan repaid to unregistered entity'),
    ('22X', 'Loan made to unregistered entity'),
    ('22Y', 'Contribution refund to an individual, partnership or limited liability company'),
    ('22Z', 'Contribution refund to candidate or committee'),
    ('23Y', 'Inaugural donation refund'),
    ('24A', 'Independent expenditure opposing election of candidate'),
    ('24C', 'Coordinated party expenditure'),
    ('24E', 'Independent expenditure advocating election of candidate'),
    ('24F', 'Communication cost for candidate (only for Form 7 filer)'),
    ('24G', 'Transfer out to affiliated committee'),
    ('24H', 'Honorarium to candidate'),
    ('24I', 'Earmarked contributor''s check passed on by intermediary committee to intended recipient (intermediary out)'),
    ('24K', 'Contribution made to nonaffiliated committee'),
    ('24N', 'Communication cost against candidate (only for Form 7 filer)'),
    ('24P', 'Contribution made to possible federal candidate including in-kind contributions'),
    ('24R', 'Election recount disbursement'),
    ('24T', 'Earmarked contribution passed to intended recipient from intermediary''s treasury (treasury out)'),
    ('24U', 'Contribution made to unregistered entity'),
    ('24Z', 'In-kind contribution made to registered filer'),
    ('28L', 'Refund of bundled contribution'),
    ('29', 'Electioneering Communication disbursement or obligation'),
    ('30', 'Convention Account receipt from an individual, partnership or limited liability company'),
    ('30T', 'Convention Account receipt from Native American Tribe'),
    ('30K', 'Convention Account receipt from registered filer'),
    ('30G', 'Convention Account - transfer in from affiliated committee'),
    ('30J', 'Convention Account - Memo - Recipient committee''s percentage of contributions from an individual, partnership or limited liability company given to joint fundraising committee'),
    ('30F', 'Convention Account - Memo - Recipient committee''s percentage of contributions from a registered committee given to joint fundraising committee'),
    ('31', 'Headquarters Account receipt from an individual, partnership or limited liability company'),
    ('31T', 'Headquarters Account receipt from Native American Tribe'),
    ('31K', 'Headquarters Account receipt from registered filer'),
    ('31G', 'Headquarters Account - transfer in from affiliated committee'),
    ('31J', 'Headquarters Account - Memo - Recipient committee''s percentage of contributions from an individual, partnership or limited liability company given to joint fundraising committee'),
    ('31F', 'Headquarters Account - Memo - Recipient committee''s percentage of contributions from a registered committee given to joint fundraising committee'),
    ('32', 'Recount Account receipt from an individual, partnership or limited liability company'),
    ('32T', 'Recount Account receipt from Native American Tribe'),
    ('32K', 'Recount Account receipt from registered filer'),
    ('32G', 'Recount Account - transfer in from affiliated committee'),
    ('32J', 'Recount Account - Memo - Recipient committee''s percentage of contributions from an individual, partnership or limited liability company given to joint fundraising committee'),
    ('32F', 'Recount Account - Memo - Recipient committee''s percentage of contributions from a registered committee given to joint fundraising committee'),
    ('40', 'Convention Account disbursement'),
    ('40Y', 'Convention Account refund to  an individual, partnership or limited liability company'),
    ('40T', 'Convention Account refund to Native American Tribe'),
    ('40Z', 'Convention Account refund to registered filer'),
    ('41', 'Headquarters Account disbursement'),
    ('41Y', 'Headquarters Account refund to  an individual, partnership or limited liability company'),
    ('41T', 'Headquarters Account refund to Native American Tribe'),
    ('41Z', 'Headquarters Account refund to registered filer'),
    ('42', 'Recount Account disbursement'),
    ('42Y', 'Recount Account refund to  an individual, partnership or limited liability company'),
    ('42T', 'Recount Account refund to Native American Tribe'),
    ('42Z', 'Recount Account refund to registered filer');

INSERT INTO `cs340_seiglern`.`candidates` (first_name, last_name, middle_name, email)
VALUES 
    ('barack', 'obama', 'hussein', 'barack.h.obama@example.com'),
    ('donald', 'john', 'trump', 'donald.j.trump@example.com'),
    ('joseph', 'robinette', 'biden', 'joseph.r.biden@example.com'),
    ('alice', 'bob', 'charlie', 'a.b.c@example.com');

-- Above line is successful

/*
real data used to demonstrate some complexity and future friction points.

note: each real person candidate will often have more than one of these records
even in the same file. this is how the data is designed. note the inconsistencies
in the name field with President Biden.
top record is for runnin for reelection and second record is for being in office?
we dont have to solve this but we need to understand that this will happen often.

our manual mapping of candidates to these candidate_office_records is the secret
to the whole project.

how you say?

1. make candidate record
2. Use first, middle, last in an ilike query (with other filters so we dont try to scan millions of records),
present that data to the user for manual mapping.
3. prob need to add some special indices like ngrams for special searches.

source: candidate master 2023-2024

begin ---
P40011678|BIDEN, JOSEPH JR|DEM|2024|US|P|00|C|N||1120 20TH STREET NW|SUITE 250|WASHINGTON|DC|20036
P40011686|BIDEN, JOSEPH R MR JR|DEM|2024|US|P|00|C|N||1120 20TH STREET NW|SUITE 250|WASHINGTON|DC|20036

S4CA00464|MANDELA, BARACK OBAMA MR.|REP|2024|CA|S|00|O|N||7348 MILTON AVENUE|APT. 1|WHITTIER|CA|90602
P40005985|HAUSKINS, DANIEL OBAMA MR JR|GWP|2024|US|P|00|C|N||1234 21ST ST.||ROCK ISLAND|IL|61201

S2AK00176|STEPHENS, JOE TRUMP AKA NOT MURKOWSKI|AKI|2022|AK|S|00|C|N|C00787093|3609 TONGASS AVENUE|5416|KETCHIKAN|AK|99901
P80001571|TRUMP, DONALD J.|REP|2024|US|P|00|C|C|C00828541|P.O. BOX 13570||ARLINGTON|VA|22219

H2AK00226|PALIN, SARAH|REP|2022|AK|H|00|O|P|C00811323|P.O. BOX 871235||WASILLA|AK|99687
H8NY15148|OCASIO-CORTEZ, ALEXANDRIA|DEM|2024|NY|H|14|I|C|C00639591|PO BOX 680080||CORONA|NY|11368


end ---


source: candidate all 2023-2024
NOTE: notice that date metadata seems like a last updated sort of deal
NOTE: this file looks cleaner and might have less dupes? we still need data in the other file
for election year but we could process this file first and then use the other file above
to map the candidate
begin---
P80000722|BIDEN, JOSEPH R JR|I|1|DEM|360.3|0|423440.56|2800|1787497.02|1364416.76|0|0|0|0|0|0|0|00|00||||||0|0|03/31/2023|0|0

no result for "obama"

P80001571|TRUMP, DONALD J.|C|2|REP|14449602.19|14053900.4|3538555.97|0|3020902.11|13931948.33|0|0|0|0|0|255109.66|10840.8|00|00||||||0|0|03/31/2023|0|0

H2AK00226|PALIN, SARAH|O|2|REP|3866.49|0|SKIP|SKIP|46379.58|0|0|0|0|0|0|0|0|AK|00||||||0|0|03/31/2023|-9152.5|0
H8NY15148|OCASIO-CORTEZ, ALEXANDRIA|I|1|DEM|1268221.44|4000|SKIP|SKIP|5188366.31|5208741.29|20|0|0|0|0|0|1253315.24|NY|14||||||0|0|

end---


NOTE: we are missing TTL_DISB, TRANS_TO_AUTH, OTHER_POL_CMTE_CONTRIB from All candidates file this is prob okay
since we didnt but it in schema but it would be cool to have.
NOTE: all of the above blows the scope for the class project but it is good for any future
the project could have.
NOTE: We probably should add category tables for cand_office_st and cand_office_district
but maybe that is overly normalized... hmmmm
*/

INSERT INTO `cs340_seiglern`.`candidate_office_records` (
    fec_cand_id,
    name,
    ttl_receipts,
    trans_from_auth,
    coh_bop,
    coh_cop,
    cand_contrib,
    cand_loans,
    other_loans,
    cand_loan_repay,
    other_loan_repay,
    debts_owed_by,
    ttl_indiv_contrib,
    cand_office_st,
    cand_office_district,
    pol_pty_contrib,
    cvg_end_dt,
    indiv_refund,
    cmte_refund,
    office_types_id,
    candidates_id,
    party_types_id,
    incumbent_challenger_statuses_id
) VALUES
    (
        'P80000722', -- fec_cand_id
        'BIDEN, JOSEPH R JR', -- name
        360.3, -- ttl_receipts 
        0, -- trans_from_auth
        1787497.02, -- coh_bop
        1364416.76, -- coh_cop
        0, -- cand_contrib
        0, -- cand_loans
        0, -- other_loans
        0, -- cand_loan_repay
        0, -- other_loan_repay
        0, -- debts_owed_by
        0, -- ttl_indiv_contrib
        '00', -- cand_office_st,
        '00', -- cand_office_district,
        0, -- pol_pty_contrib
        '2023-03-31', -- cvg_end_dt
        0, -- indiv_refund
        0, -- cmte_refund
        (SELECT id FROM `cs340_seiglern`.`office_types` WHERE code = 'P'),
        NULL,
        (SELECT id FROM `cs340_seiglern`.`party_types` WHERE short_name = 'DEM'),
        (SELECT id FROM `cs340_seiglern`.`incumbent_challenger_statuses` WHERE code = 'I')
    ),
    (
        'P80001571', -- fec_cand_id
        'TRUMP, DONALD J.', -- name
        14449602.19, -- ttl_receipts 
        14053900.4, -- trans_from_auth
        3020902.11, -- coh_bop
        13931948.33, -- coh_cop
        0, -- cand_contrib
        0, -- cand_loans
        0, -- other_loans
        0, -- cand_loan_repay
        0, -- other_loan_repay
        255109.66, -- debts_owed_by
        10840.8, -- ttl_indiv_contrib
        '00', -- cand_office_st,
        '00', -- cand_office_district,
        0, -- pol_pty_contrib
        '2023-03-31', -- cvg_end_dt
        0, -- indiv_refund
        0, -- cmte_refund
        (SELECT id FROM `cs340_seiglern`.`office_types` WHERE code = 'P'),
        NULL,
        (SELECT id FROM `cs340_seiglern`.`party_types` WHERE short_name = 'REP'),
        (SELECT id FROM `cs340_seiglern`.`incumbent_challenger_statuses` WHERE code = 'C')
    ),
    (
        'H2AK00226', -- fec_cand_id
        'PALIN, SARAH', -- name
        3866.49, -- ttl_receipts 
        0, -- trans_from_auth
        46379.58, -- coh_bop
        0, -- coh_cop
        0, -- cand_contrib
        0, -- cand_loans
        0, -- other_loans
        0, -- cand_loan_repay
        0, -- other_loan_repay
        255109.66, -- debts_owed_by
        10840.8, -- ttl_indiv_contrib
        'AK', -- cand_office_st,
        '00', -- cand_office_district,
        0, -- pol_pty_contrib
        '2023-03-31', -- cvg_end_dt
        -9152.5, -- indiv_refund
        0, -- cmte_refund
        (SELECT id FROM `cs340_seiglern`.`office_types` WHERE code = 'H'),
        NULL,
        (SELECT id FROM `cs340_seiglern`.`party_types` WHERE short_name = 'REP'),
        (SELECT id FROM `cs340_seiglern`.`incumbent_challenger_statuses` WHERE code = 'O')
    ),
    (
        'H8NY15148', -- fec_cand_id
        'OCASIO-CORTEZ, ALEXANDRIA', -- name
        1268221.44, -- ttl_receipts 
        4000, -- trans_from_auth
        5188366.31, -- coh_bop
        5208741.29, -- coh_cop
        20, -- cand_contrib
        0, -- cand_loans
        0, -- other_loans
        0, -- cand_loan_repay
        0, -- other_loan_repay
        0, -- debts_owed_by
        1253315.24, -- ttl_indiv_contrib
        'NY', -- cand_office_st,
        '14', -- cand_office_district,
        0, -- pol_pty_contrib
        '1970-01-01', -- cvg_end_dt
        0, -- indiv_refund
        0, -- cmte_refund
        (SELECT id FROM `cs340_seiglern`.`office_types` WHERE code = 'H'),
        NULL,
        (SELECT id FROM `cs340_seiglern`.`party_types` WHERE short_name = 'DEM'),
        (SELECT id FROM `cs340_seiglern`.`incumbent_challenger_statuses` WHERE code = 'O')
    );


INSERT INTO `cs340_seiglern`.`committee_types` (code, name, explanation)
VALUES
    ('C', 'Communication cost', 'Organizations like corporations or unions may prepare communications for their employees or members that advocate the election of specific candidates and they must disclose them under certain circumstances. These are usually paid with direct corporate or union funds rather than from PACs.'),
    ('D', 'Delegate committee', 'Delegate committees are organized for the purpose of influencing the selection of delegates to Presidential nominating conventions. The term includes a group of delegates, a group of individuals seeking to become delegates, and a group of individuals supporting delegates.'),
    ('E', 'Electioneering communication', 'Groups (other than PACs) making electioneering communications'),
    ('H', 'House', 'Campaign committees for candidates for the U.S. House of Representatives'),
    ('I', 'Independent expenditor (person or group)', 'Individuals or groups (other than PACs) making independent expenditures over $250 in a year must disclose those expenditures'),
    ('N', 'PAC - nonqualified', '	PACs that have not yet been in existence for six months and received contributions from 50 people and made contributions to five federal candidates. These committees have lower limits for their contributions to candidates.'),
    ('O', 'Independent expenditure-only (Super PACs)', 'Political Committee that has filed a statement consistent with AO 2010-09(https://www.fec.gov/data/legal/advisory-opinions/2010-09/) or AO 2010-11(https://www.fec.gov/data/legal/advisory-opinions/2010-11/).'),
    ('P', '	Presidential', 'Campaign committee for candidate for U.S. President'),
    ('Q', 'PAC - qualified', 'PACs that have been in existence for six months and received contributions from 50 people and made contributions to five federal candidates'),
    ('S', 'Senate', 'Campaign committee for candidate for Senate'),
    ('U', 'Single-candidate independent expenditure', NULL),
    ('V', 'Hybrid PAC (with Non-Contribution Account) - Nonqualified', 'Political committees with non-contribution accounts(https://www.fec.gov/help-candidates-and-committees/registering-pac/bank-accounts-nonconnected-pacs/)'),
    ('W', 'Hybrid PAC (with Non-Contribution Account) - Qualified', 'Political committees with non-contribution accounts(https://www.fec.gov/help-candidates-and-committees/registering-pac/bank-accounts-nonconnected-pacs/)'),
    ('X', 'Party - nonqualified', 'Party committees that have not yet been in existence for six months and received contributions from 50 people, unless they are affiliated with another party committee that has met these requirements.'),
    ('Y', '	Party - qualified', 'Party committees that have existed for at least six months and received contributions from 50 people or are affiliated with another party committee that meets these requirements.'),
    ('Z', '	National party nonfederal account', 'National party nonfederal accounts. Not permitted after enactment of Bipartisan Campaign Reform Act of 2002.');



/*
NOTE: for the record I did contributions first and then circled back to do
committees up here.
It seems like our change to make committees optional was the right one.
many committee ids exist in the master file and they arent all in pas224 but they might
be in the other contributions file maybe.
source: Committe master file. record: cm24
-- begin
C00748582|REALLY AMERICAN PAC|SKIP|SKIP||
WASHINGTON|DC|20015|U|O||M||NONE|

C00489799|PLANNED PARENTHOOD VOTES|LOUIE, MAGGIE|123 WILLIAM ST.||NEW YORK|NY|10038|U|O||M||NONE|



C00681825|LAW ENFORCEMENT FOR A SAFER AMERICA PAC|NELSON, MARK|1032 15TH ST NW||WASHINGTON|DC|20005|U|O|OTH|M||NONE|

C00004036|SEIU COPE (SERVICE EMPLOYEES INTERNATIONAL UNION COMMITTEE ON POLITICAL EDUCATION)
|VERRETT, APRIL|1800 MASSACHUSETTS AVE., NW||WASHINGTON|DC|20036|B|Q||M|L|SERVICE EMPLOYEES INTERNATIONAL UNION|

-- end

TODO: Remove employer because it is not in the master file.
TODO: contributor_types shoudl not have landed in this table this should be committe_type and we also need
a new table with that.
TODO: contributor type should only go on contribution
*/
INSERT INTO `cs340_seiglern`.`committees` (
    cmte_id,
    name,
    city,
    state,
    zip_code,
    committee_types_id
) VALUES
    (
        'C00748582',
        'REALLY AMERICAN PAC',
        'WASHINGTON',
        'DC',
        '20015', -- zip_code
        (SELECT id FROM `cs340_seiglern`.`committee_types` WHERE code = 'O')
    ),
    (
        'C00489799',
        'PLANNED PARENTHOOD VOTES',
        'NEW YORK',
        'NY',
        '10038', -- zip_code
        (SELECT id FROM `cs340_seiglern`.`committee_types` WHERE code = 'O')
    ),
    (
        'C00681825',
        'LAW ENFORCEMENT FOR A SAFER AMERICA PAC',
        'WASHINGTON',
        'DC',
        '20005', -- zip_code
        (SELECT id FROM `cs340_seiglern`.`committee_types` WHERE code = 'O')
    ),
    (
        'C00004036',
        'SEIU COPE (SERVICE EMPLOYEES INTERNATIONAL UNION COMMITTEE ON POLITICAL EDUCATION)',
        'WASHINGTON',
        'DC',
        '20036', -- zip_code
        (SELECT id FROM `cs340_seiglern`.`committee_types` WHERE code = 'Q')
    );





/*
source: contributions from committees data 2024 aka pas224
search conducted on both fec candidate ids above

THIS DATA ID C00748582 IS ABOVE with what looks to be one name and below with another.

THIS IS REAL FEC DATA AND THE SOURCE SEEMS LIKE
IT SAYS IT SHOULD!!!!

THIS IS LIKELY my misunderstand of their confusing data.....?

-- begin
TRUMP ---
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01092023|7000|P80001571|P80001571|SE.28013|1690370|||4022120231732517006
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01232023|7000|P80001571|P80001571|SE.28014|1690370|||4022120231732517007

C00489799|A|M3|P2024|202304189581037688|24A|PAC|PLANNED PARENTHOOD ACTION FUND, INC.|NEW YORK|NY|100383804|||02142023|200|P80001571|P80001571|500098872|1700821|||4042020231743494020
TRUMP ---


AOC from 2022 file:
C00681825|N|MY|P2022|202107309456960962|24A|ORG|THE BOWLINE GROUP LLC|HIGHLANDS|NJ|07732|||06092021|63750|H8NY15148|H8NY15148|SE-S223831|1532916|||4081320211326551161
C00004036|A|M5|P2022|202207209522512161|24K|CCM|ALEXANDRIA OCASIO-CORTEZ FOR CONGRESS|CORONA|NY|113680080|||04282021|2500|C00639591|H8NY15148|500016705|1618528|||4073020221553612171
-- end




It is unclear whether paying to take out an ad against a candidate is captured in the above records.
I think I recall reading something about that being in some data but that is a future interest
that does not change the data we parse.



*/

INSERT INTO `cs340_seiglern`.`contributions` (
    transaction_pgi,
    image_num,
    transaction_dt,
    transaction_amt,
    trans_id,
    file_num,
    memo_cd,
    memo_text,
    sub_id,
    committees_id,
    report_types_id,
    transaction_types_id,
    amendment_indicators_id,
    contributor_types_id
) VALUES 
  (
    'P2024', -- transaction_pgi,
    '202302209578707392', -- image_num,
    '2023-01-09', -- transaction_dt,
    7000, -- transaction_amt,
    'SE.28013', -- trans_id,
    1690370, -- file_num,
    NULL, -- memo_cd,
    NULL, -- memo_text,
    4022120231732517006, -- sub_id,
    (SELECT id FROM `cs340_seiglern`.`committees` WHERE cmte_id = 'C00748582'),
    (SELECT id FROM `cs340_seiglern`.`report_types` WHERE code = 'M2'),
    (SELECT id FROM `cs340_seiglern`.`transaction_types` WHERE code = '24A'),
    (SELECT id FROM `cs340_seiglern`.`amendment_indicators` WHERE code = 'N'),
    (SELECT id FROM `cs340_seiglern`.`contributor_types` WHERE code = 'ORG')
  ),
  (
    'P2022', -- transaction_pgi,
    '202107309456960962', -- image_num,
    '2021-06-09', -- transaction_dt,
    63750, -- transaction_amt,
    'SE-S223831', -- trans_id,
    1532916, -- file_num,
    NULL, -- memo_cd,
    NULL, -- memo_text,
    4081320211326551161, -- sub_id,
    (SELECT id FROM `cs340_seiglern`.`committees` WHERE cmte_id = 'C00681825'),
    (SELECT id FROM `cs340_seiglern`.`report_types` WHERE code = 'MY'),
    (SELECT id FROM `cs340_seiglern`.`transaction_types` WHERE code = '24A'),
    (SELECT id FROM `cs340_seiglern`.`amendment_indicators` WHERE code = 'N'),
    (SELECT id FROM `cs340_seiglern`.`contributor_types` WHERE code = 'ORG')
  ),
  (
    'P2022', -- transaction_pgi,
    '202207209522512161', -- image_num,
    '2021-04-08', -- transaction_dt,
    2500, -- transaction_amt,
    '500016705', -- trans_id,
    1618528, -- file_num,
    NULL, -- memo_cd,
    NULL, -- memo_text,
    4073020221553612171, -- sub_id,
    (SELECT id FROM `cs340_seiglern`.`committees` WHERE cmte_id = 'C00004036'),
    (SELECT id FROM `cs340_seiglern`.`report_types` WHERE code = 'M5'),
    (SELECT id FROM `cs340_seiglern`.`transaction_types` WHERE code = '24K'),
    (SELECT id FROM `cs340_seiglern`.`amendment_indicators` WHERE code = 'A'),
    (SELECT id FROM `cs340_seiglern`.`contributor_types` WHERE code = 'CCM')
  );




-- EVEN YEARS ONLY FOR CYCLES
INSERT INTO `cs340_seiglern`.`cycles` (year)
VALUES
    ('2018'),
    ('2020'),
    ('2022'),
    ('2024');


/*
This is going to look weird but the reason it looks weird is because we would do all of this
while processing multiple zipfiles of text files.

There is no table to get clever and do the joins from so we use the data like below
to lookup data in our db (likely what we just inserted).

source: contributions from committees data 2024 aka pas224
search conducted on both fec candidate ids above


-- begin
TRUMP ---
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01092023|7000|P80001571|P80001571|SE.28013|1690370|||4022120231732517006
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01232023|7000|P80001571|P80001571|SE.28014|1690370|||4022120231732517007

C00489799|A|M3|P2024|202304189581037688|24A|PAC|PLANNED PARENTHOOD ACTION FUND, INC.|NEW YORK|NY|100383804|||02142023|200|P80001571|P80001571|500098872|1700821|||4042020231743494020
TRUMP ---

*/

INSERT INTO `cs340_seiglern`.`candidate_office_records_committees`(
    candidate_office_records_id,
    committees_id
) VALUES
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`committees` 
            WHERE cmte_id = 'C00748582'
        )
    ),
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`committees` 
            WHERE cmte_id = 'C00489799'
        )
    ),
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`committees` 
            WHERE cmte_id = 'C00681825'
        )
    );


/*
This is going to look weird but the reason it looks weird is because we would do all of this
while processing multiple zipfiles of text files.

There is no table to get clever and do the joins from so we use the data like below
to lookup data in our db (likely what we just inserted).

source: contributions from committees data 2024 aka pas224
search conducted on both fec candidate ids above


-- begin
TRUMP ---
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01092023|7000|P80001571|P80001571|SE.28013|1690370|||4022120231732517006
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01232023|7000|P80001571|P80001571|SE.28014|1690370|||4022120231732517007

C00489799|A|M3|P2024|202304189581037688|24A|PAC|PLANNED PARENTHOOD ACTION FUND, INC.|NEW YORK|NY|100383804|||02142023|200|P80001571|P80001571|500098872|1700821|||4042020231743494020
TRUMP ---

*/

-- In the future add more records and turn the last two back on
INSERT INTO `cs340_seiglern`.`candidate_office_records_contributions`(
    candidate_office_records_id,
    contributions_id
) VALUES
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4022120231732517006 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4081320211326551161 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4073020221553612171 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    );
    -- (
    --     (
    --         SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
    --         WHERE fec_cand_id = 'P80001571'
    --     ),
    --     (
    --         SELECT id FROM `cs340_seiglern`.`contributions` 
    --         WHERE sub_id = 4022120231732517007 -- we use sub_id because we know this is a unique fec id for the row in the original data
    --     )
    -- ),
    -- (
    --     (
    --         SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
    --         WHERE fec_cand_id = 'P80001571'
    --     ),
    --     (
    --         SELECT id FROM `cs340_seiglern`.`contributions` 
    --         WHERE sub_id = 4042020231743494020 -- we use sub_id because we know this is a unique fec id for the row in the original data
    --     )
    -- );




/*
This is going to look weird but the reason it looks weird is because we would do all of this
while processing multiple zipfiles of text files.

There is no table to get clever and do the joins from so we use the data like below
to lookup data in our db (likely what we just inserted).

source: contributions from committees data 2024 aka pas224
search conducted on both fec candidate ids above


-- begin
TRUMP ---
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01092023|7000|P80001571|P80001571|SE.28013|1690370|||4022120231732517006
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01232023|7000|P80001571|P80001571|SE.28014|1690370|||4022120231732517007

C00489799|A|M3|P2024|202304189581037688|24A|PAC|PLANNED PARENTHOOD ACTION FUND, INC.|NEW YORK|NY|100383804|||02142023|200|P80001571|P80001571|500098872|1700821|||4042020231743494020
TRUMP ---


NOTICE THE YEAR FOR THE ELECTION IS PARSED OFF OF COL 4: P2024
*/


INSERT INTO `cs340_seiglern`.`election_years_contributions`(
    election_years_year,
    contributions_id
) VALUES
    (
        (
            SELECT year FROM `cs340_seiglern`.`election_years` 
            WHERE year = '2024'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4022120231732517006 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT year FROM `cs340_seiglern`.`election_years` 
            WHERE year = '2022'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4081320211326551161 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT year FROM `cs340_seiglern`.`election_years` 
            WHERE year = '2022'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4073020221553612171 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    );

/*
This is going to look weird but the reason it looks weird is because we would do all of this
while processing multiple zipfiles of text files.

There is no table to get clever and do the joins from so we use the data like below
to lookup data in our db (likely what we just inserted).

source: contributions from committees data 2024 aka pas224
search conducted on both fec candidate ids above


-- begin
TRUMP ---
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01092023|7000|P80001571|P80001571|SE.28013|1690370|||4022120231732517006
C00748582|N|M2|P2024|202302209578707392|24A|ORG|BLUE WAVE COMMUNICATIONS LLC|CHICAGO|IL|60602|||01232023|7000|P80001571|P80001571|SE.28014|1690370|||4022120231732517007

C00489799|A|M3|P2024|202304189581037688|24A|PAC|PLANNED PARENTHOOD ACTION FUND, INC.|NEW YORK|NY|100383804|||02142023|200|P80001571|P80001571|500098872|1700821|||4042020231743494020
TRUMP ---


NOTICE THE YEAR FOR THE CYCLE IS PARSE OUT OF 02142023 -> year 2023 -> 2023 % 2 != 0 -> 2023 + 1 = 2024
Because cycles are even years that cover the two year election cycles in this case the cycle is 2023-2024 and is represented by 2024
*/
INSERT INTO `cs340_seiglern`.`cycles_contributions`(
    cycles_year,
    contributions_id
) VALUES
    (
        (
            SELECT year FROM `cs340_seiglern`.`cycles` 
            WHERE year = '2024'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4022120231732517006 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT year FROM `cs340_seiglern`.`cycles` 
            WHERE year = '2024'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4081320211326551161 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    ),
    (
        (
            SELECT year FROM `cs340_seiglern`.`cycles` 
            WHERE year = '2024'
        ),
        (
            SELECT id FROM `cs340_seiglern`.`contributions` 
            WHERE sub_id = 4073020221553612171 -- we use sub_id because we know this is a unique fec id for the row in the original data
        )
    );

/* 
For candidate election years and cycles it is a bit tricky.
We know how to get election years from the master candidate record.
We know how to get election years from the contributions data (see above comment block for election_years_contributions)
We know how to get cycles years from the contributions data (see above comment block for cycles_contributions)

We also know that a candidate record can exist for an election year without any contributions.
Scope doesnt allow us to go dig up and analyze all the FEC data but we will do the best with what we know.

For each data source we will insert on conflict do nothing the appropriate values.
Just kidding mysql docs and research tell me that is not supported in mysql or mariadb like it is in postgres

# Citation for the following code:
# Date: 05/04/2023
# Copied from /OR/ Adapted from /OR/ Based on:
https://stackoverflow.com/a/4596409

We just always need to be sure not to mix in dupes so one insert per data source.
*/
INSERT INTO `cs340_seiglern`.`election_years_candidate_office_records`(
    election_years_year,
    candidate_office_records_id
) VALUES
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        )
    ),
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80000722'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H2AK00226'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        )
    )
ON DUPLICATE KEY UPDATE election_years_year=election_years_year, candidate_office_records_id=candidate_office_records_id;

-- do it again for proof that we are seriousssss. (pretend this is another data source)
INSERT INTO `cs340_seiglern`.`election_years_candidate_office_records`(
    election_years_year,
    candidate_office_records_id
) VALUES
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        )
    ),
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80000722'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H2AK00226'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        )
    )
ON DUPLICATE KEY UPDATE election_years_year=election_years_year, candidate_office_records_id=candidate_office_records_id;

-- DO cycles now same way

INSERT INTO `cs340_seiglern`.`cycles_candidate_office_records`(
    cycles_year,
    candidate_office_records_id
) VALUES
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        )
    ),
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80000722'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H2AK00226'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        )
    )
ON DUPLICATE KEY UPDATE cycles_year=cycles_year, candidate_office_records_id=candidate_office_records_id;

-- do it again for proof that we are seriousssss. (pretend this is another data source)
INSERT INTO `cs340_seiglern`.`cycles_candidate_office_records`(
    cycles_year,
    candidate_office_records_id
) VALUES
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80001571'
        )
    ),
    (
        '2024',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'P80000722'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H2AK00226'
        )
    ),
    (
        '2022',
        (
            SELECT id FROM `cs340_seiglern`.`candidate_office_records` 
            WHERE fec_cand_id = 'H8NY15148'
        )
    )
ON DUPLICATE KEY UPDATE cycles_year=cycles_year, candidate_office_records_id=candidate_office_records_id;